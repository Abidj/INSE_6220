# -*- coding: utf-8 -*-
"""BankNoteAuthentication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16mmtzCXIGJmhlIsAoXxu2Pga1bVvfdi1
"""

!pip3 install pycaret

from pycaret.utils import version
version()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme(style="darkgrid")
import pandas as pd
plt.rcParams['figure.figsize'] = (7,5)
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

print("Pandas version: ", pd.__version__)
print("Seaborn version: ", sns.__version__)

df = pd.read_csv('https://raw.githubusercontent.com/Abidj/INSE_6220/main/BankNoteAuthentication.csv')
df.head(25)

df.drop_duplicates(inplace=True)

df.info()

print("Number of duplicated rows is: ", df.duplicated().sum())

print("Number of rows with NaNs is: ", df.isna().any(axis=1).sum())

sns.pairplot(df, hue='class')
plt.show()

y =df['class']
y.value_counts().plot(kind='pie')
plt.ylabel('')
plt.show()

X = df.drop(columns=['class'])
X.head(10)

X.describe().transpose()

Xs = StandardScaler().fit_transform(X)
Xcols = X.columns
X = pd.DataFrame(Xs)
X.columns = Xcols
X.head(10)

X.describe().transpose()

observations = list(df.index)
variables = list(df.columns)

ax = plt.figure()
ax = sns.boxplot(data=X, orient="v", palette="Set2")
ax.set_xticklabels(ax.get_xticklabels(),rotation=45);

ax = plt.figure()    
ax = sns.boxplot(data=X, orient="v", palette="Set2")
ax = sns.stripplot(data=X, color=".25") 
ax.set_xticklabels(ax.get_xticklabels(),rotation=45);

ax = sns.heatmap(X.corr(), cmap='RdYlGn_r', linewidths=0.5, annot=True, cbar=False, square=True)
plt.yticks(rotation=0)
ax.tick_params(labelbottom=False,labeltop=True)
ax.set_xticklabels(ax.get_xticklabels(),rotation=0);

pca = PCA()
Z = pca.fit_transform(X)
# 1(No)->0,  2(Yes)->1, 
idx_No = np.where(y == 0)
idx_Yes = np.where(y == 1)
plt. figure()
plt.scatter(Z[idx_No,0], Z[idx_No,1], c='r', label='No')
plt.scatter(Z[idx_Yes,0], Z[idx_Yes,1], c='g', label='Yes')
plt.legend()
plt.xlabel('No')
plt.ylabel('Yes')

A = pca.components_.T 

plt.scatter(A[:,0],A[:,1],c='r')
plt.xlabel('A1')
plt.ylabel('A2')
for label, x, y in zip(variables, A[:, 0], A[:, 1]):
  plt.annotate(label, xy=(x, y), xytext=(-2, 2), textcoords='offset points', ha='right', va='bottom')

#Eigenvalues
Lambda = pca.explained_variance_ 

#Scree plot
x = np.arange(len(Lambda)) + 1
plt.plot(x,Lambda/sum(Lambda), 'ro-', lw=3)
plt.xticks(x, [""+str(i) for i in x], rotation=0)
plt.xlabel('Number of components')
plt.ylabel('Explained variance')

ell = pca.explained_variance_ratio_
ind = np.arange(len(ell))
plt.bar(ind, ell, align='center', alpha=0.5)
plt.plot(np.cumsum(ell))
plt.xlabel('Number of components')
plt.ylabel('Cumulative explained variance')

# 0,1 denote PC1 and PC2; change values for other PCs
A1 = A[:,0] 
A2 = A[:,1]
Z1 = Z[:,0] 
Z2 = Z[:,1]

plt.figure()
plt.xlabel('Z1')
plt.ylabel('Z2')
for i in range(len(A1)):
# arrows project features as vectors onto PC axes
  plt.arrow(0, 0, A1[i]*max(Z1), A2[i]*max(Z2), color='k', width=0.0005, head_width=0.0025)
  plt.text(A1[i]*max(Z1)*1.2, A2[i]*max(Z2)*1.2,variables[i], color='k')

plt.scatter(Z[idx_No,0], Z[idx_No,1], c='r', label='No')
plt.scatter(Z[idx_Yes,0], Z[idx_Yes,1], c='g', label='Yes')
plt.legend(loc='upper left')

!pip3 install pca

from pca import pca
# Initialize and keep all PCs
model = pca()
# Fit transform
out = model.fit_transform(X)

out['PC']

model.scatter(label=True, legend=False)

A = out['loadings'].T

sns.scatterplot(data=A, x="PC1", y="PC2")
plt.xlabel('A1')
plt.ylabel('A2')
for i in range(A.shape[0]):
 plt.text(x=A.PC1[i]+0.02,y=A.PC2[i]+0.02, s=variables[i],
          fontdict=dict(color='red',size=10),
          bbox=dict(facecolor='yellow',alpha=0.5))

VR = out['variance_ratio']
x = np.arange(len(VR)) + 1
plt.plot(x, VR, 'ro-', lw=3)
plt.xticks(x, [""+str(i) for i in x], rotation=0)
plt.xlabel('Number of components')
plt.ylabel('Explained variance') 
plt.show()

model.plot();

model.biplot(label=False, legend=False)

# install slim version (default)
!pip install pycaret

#Run the below code in your notebook to check the installed version
from pycaret.utils import version
version()

import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = (7,5)

#read cvs file into dataframe
df = pd.read_csv('https://raw.githubusercontent.com/Abidj/INSE_6220/main/BankNoteAuthentication.csv')
df.head(25)

from pycaret.classification import *
clf_pca = setup(data=df, target='class', train_size=0.7, session_id=123, normalize = True, pca = True, pca_components = 3)

#show the best model and their statistics
best_model_pca = compare_models()

# Tune hyperparameters with scikit-learn (default)
tuned_best_model_pca = tune_model(best_model_pca)

tuned_best_model_pca

evaluate_model(tuned_best_model_pca)

!pip install pycaret[analysis]

rf_pca = create_model('rf')

tuned_rf_pca = tune_model(rf_pca)

interpret_model(tuned_rf_pca, plot='summary')

#explainer = shap.TreeExplainer(tuned_rf_pca)
#X = df.drop('class', axis=1)
#shap_values = explainer.shap_values(X)
#shap.summary_plot(shap_values, X)

interpret_model(tuned_rf_pca, plot='reason', observation=32)

interpret_model(tuned_rf_pca, plot='reason')